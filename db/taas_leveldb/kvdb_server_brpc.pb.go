// Code generated by protoc-gen-go-brpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-brpc v1.2.0
// - protoc             v3.12.4
// source: kvdb_server.proto

package taas_leveldb

import (
	context "context"
	brpc_go "github.com/icexin/brpc-go"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KvDBGetServiceClient is the client API for KvDBGetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KvDBGetServiceClient interface {
	Get(ctx context.Context, in *KvDBRequest, opts ...brpc_go.CallOption) (*KvDBResponse, error)
}

type kvDBGetServiceClient struct {
	cc brpc_go.ClientConn
}

func NewKvDBGetServiceClient(cc brpc_go.ClientConn) KvDBGetServiceClient {
	return &kvDBGetServiceClient{cc}
}

func (c *kvDBGetServiceClient) Get(ctx context.Context, in *KvDBRequest, opts ...brpc_go.CallOption) (*KvDBResponse, error) {
	out := new(KvDBResponse)
	err := c.cc.Invoke(ctx, "/proto.KvDBGetService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KvDBGetServiceServer is the server API for KvDBGetService service.
// All implementations should embed UnimplementedKvDBGetServiceServer
// for forward compatibility
type KvDBGetServiceServer interface {
	Get(context.Context, *KvDBRequest) (*KvDBResponse, error)
}

// UnimplementedKvDBGetServiceServer should be embedded to have forward compatible implementations.
type UnimplementedKvDBGetServiceServer struct {
}

func (UnimplementedKvDBGetServiceServer) Get(context.Context, *KvDBRequest) (*KvDBResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}

// wrapperKvDBGetServiceServer is a wrapper for KvDBGetServiceServer that implements the interface of net/rpc Service
type wrapperKvDBGetServiceServer struct {
	svr KvDBGetServiceServer
}

func (w *wrapperKvDBGetServiceServer) Get(ctx context.Context, req *KvDBRequest, resp *KvDBResponse) error {
	res, err := w.svr.Get(ctx, req)
	if err != nil {
		return err
	}
	*resp = *res
	return nil
}

// UnsafeKvDBGetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KvDBGetServiceServer will
// result in compilation errors.
type UnsafeKvDBGetServiceServer interface {
	mustEmbedUnimplementedKvDBGetServiceServer()
}

func RegisterKvDBGetServiceServer(s grpc.ServiceRegistrar, srv KvDBGetServiceServer) {
	s.RegisterService(&KvDBGetService_ServiceDesc, &wrapperKvDBGetServiceServer{srv})
}

func _KvDBGetService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KvDBRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KvDBGetServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.KvDBGetService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KvDBGetServiceServer).Get(ctx, req.(*KvDBRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KvDBGetService_ServiceDesc is the grpc.ServiceDesc for KvDBGetService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KvDBGetService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.KvDBGetService",
	HandlerType: (*KvDBGetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _KvDBGetService_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kvdb_server.proto",
}

// KvDBPutServiceClient is the client API for KvDBPutService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KvDBPutServiceClient interface {
	Put(ctx context.Context, in *KvDBRequest, opts ...brpc_go.CallOption) (*KvDBResponse, error)
}

type kvDBPutServiceClient struct {
	cc brpc_go.ClientConn
}

func NewKvDBPutServiceClient(cc brpc_go.ClientConn) KvDBPutServiceClient {
	return &kvDBPutServiceClient{cc}
}

func (c *kvDBPutServiceClient) Put(ctx context.Context, in *KvDBRequest, opts ...brpc_go.CallOption) (*KvDBResponse, error) {
	out := new(KvDBResponse)
	err := c.cc.Invoke(ctx, "/proto.KvDBPutService/Put", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KvDBPutServiceServer is the server API for KvDBPutService service.
// All implementations should embed UnimplementedKvDBPutServiceServer
// for forward compatibility
type KvDBPutServiceServer interface {
	Put(context.Context, *KvDBRequest) (*KvDBResponse, error)
}

// UnimplementedKvDBPutServiceServer should be embedded to have forward compatible implementations.
type UnimplementedKvDBPutServiceServer struct {
}

func (UnimplementedKvDBPutServiceServer) Put(context.Context, *KvDBRequest) (*KvDBResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}

// wrapperKvDBPutServiceServer is a wrapper for KvDBPutServiceServer that implements the interface of net/rpc Service
type wrapperKvDBPutServiceServer struct {
	svr KvDBPutServiceServer
}

func (w *wrapperKvDBPutServiceServer) Put(ctx context.Context, req *KvDBRequest, resp *KvDBResponse) error {
	res, err := w.svr.Put(ctx, req)
	if err != nil {
		return err
	}
	*resp = *res
	return nil
}

// UnsafeKvDBPutServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KvDBPutServiceServer will
// result in compilation errors.
type UnsafeKvDBPutServiceServer interface {
	mustEmbedUnimplementedKvDBPutServiceServer()
}

func RegisterKvDBPutServiceServer(s grpc.ServiceRegistrar, srv KvDBPutServiceServer) {
	s.RegisterService(&KvDBPutService_ServiceDesc, &wrapperKvDBPutServiceServer{srv})
}

func _KvDBPutService_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KvDBRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KvDBPutServiceServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.KvDBPutService/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KvDBPutServiceServer).Put(ctx, req.(*KvDBRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KvDBPutService_ServiceDesc is the grpc.ServiceDesc for KvDBPutService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KvDBPutService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.KvDBPutService",
	HandlerType: (*KvDBPutServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Put",
			Handler:    _KvDBPutService_Put_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kvdb_server.proto",
}
