// Code generated by protoc-gen-go-brpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-brpc v1.2.0
// - protoc             v3.20.3
// source: leveldb.proto

package leveldb

import (
	context "context"
	brpc_go "github.com/icexin/brpc-go"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LeveldbServiceClient is the client API for LeveldbService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LeveldbServiceClient interface {
	Execute(ctx context.Context, in *LeveldbRequest, opts ...brpc_go.CallOption) (*LeveldbResponse, error)
	Put(ctx context.Context, in *LeveldbRequest, opts ...brpc_go.CallOption) (*LeveldbResponse, error)
	Get(ctx context.Context, in *LeveldbRequest, opts ...brpc_go.CallOption) (*LeveldbResponse, error)
}

type leveldbServiceClient struct {
	cc brpc_go.ClientConn
}

func NewLeveldbServiceClient(cc brpc_go.ClientConn) LeveldbServiceClient {
	return &leveldbServiceClient{cc}
}

func (c *leveldbServiceClient) Execute(ctx context.Context, in *LeveldbRequest, opts ...brpc_go.CallOption) (*LeveldbResponse, error) {
	out := new(LeveldbResponse)
	err := c.cc.Invoke(ctx, "/leveldb.LeveldbService/Execute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leveldbServiceClient) Put(ctx context.Context, in *LeveldbRequest, opts ...brpc_go.CallOption) (*LeveldbResponse, error) {
	out := new(LeveldbResponse)
	err := c.cc.Invoke(ctx, "/leveldb.LeveldbService/Put", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leveldbServiceClient) Get(ctx context.Context, in *LeveldbRequest, opts ...brpc_go.CallOption) (*LeveldbResponse, error) {
	out := new(LeveldbResponse)
	err := c.cc.Invoke(ctx, "/leveldb.LeveldbService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LeveldbServiceServer is the server API for LeveldbService service.
// All implementations should embed UnimplementedLeveldbServiceServer
// for forward compatibility
type LeveldbServiceServer interface {
	Execute(context.Context, *LeveldbRequest) (*LeveldbResponse, error)
	Put(context.Context, *LeveldbRequest) (*LeveldbResponse, error)
	Get(context.Context, *LeveldbRequest) (*LeveldbResponse, error)
}

// UnimplementedLeveldbServiceServer should be embedded to have forward compatible implementations.
type UnimplementedLeveldbServiceServer struct {
}

func (UnimplementedLeveldbServiceServer) Execute(context.Context, *LeveldbRequest) (*LeveldbResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Execute not implemented")
}
func (UnimplementedLeveldbServiceServer) Put(context.Context, *LeveldbRequest) (*LeveldbResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (UnimplementedLeveldbServiceServer) Get(context.Context, *LeveldbRequest) (*LeveldbResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}

// wrapperLeveldbServiceServer is a wrapper for LeveldbServiceServer that implements the interface of net/rpc Service
type wrapperLeveldbServiceServer struct {
	svr LeveldbServiceServer
}

func (w *wrapperLeveldbServiceServer) Execute(ctx context.Context, req *LeveldbRequest, resp *LeveldbResponse) error {
	res, err := w.svr.Execute(ctx, req)
	if err != nil {
		return err
	}
	*resp = *res
	return nil
}
func (w *wrapperLeveldbServiceServer) Put(ctx context.Context, req *LeveldbRequest, resp *LeveldbResponse) error {
	res, err := w.svr.Put(ctx, req)
	if err != nil {
		return err
	}
	*resp = *res
	return nil
}
func (w *wrapperLeveldbServiceServer) Get(ctx context.Context, req *LeveldbRequest, resp *LeveldbResponse) error {
	res, err := w.svr.Get(ctx, req)
	if err != nil {
		return err
	}
	*resp = *res
	return nil
}

// UnsafeLeveldbServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LeveldbServiceServer will
// result in compilation errors.
type UnsafeLeveldbServiceServer interface {
	mustEmbedUnimplementedLeveldbServiceServer()
}

func RegisterLeveldbServiceServer(s grpc.ServiceRegistrar, srv LeveldbServiceServer) {
	s.RegisterService(&LeveldbService_ServiceDesc, &wrapperLeveldbServiceServer{srv})
}

func _LeveldbService_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeveldbRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeveldbServiceServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/leveldb.LeveldbService/Execute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeveldbServiceServer).Execute(ctx, req.(*LeveldbRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeveldbService_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeveldbRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeveldbServiceServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/leveldb.LeveldbService/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeveldbServiceServer).Put(ctx, req.(*LeveldbRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeveldbService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeveldbRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeveldbServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/leveldb.LeveldbService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeveldbServiceServer).Get(ctx, req.(*LeveldbRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LeveldbService_ServiceDesc is the grpc.ServiceDesc for LeveldbService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LeveldbService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "leveldb.LeveldbService",
	HandlerType: (*LeveldbServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Execute",
			Handler:    _LeveldbService_Execute_Handler,
		},
		{
			MethodName: "Put",
			Handler:    _LeveldbService_Put_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _LeveldbService_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "leveldb.proto",
}
